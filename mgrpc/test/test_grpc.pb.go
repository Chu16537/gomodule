// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomserverClient is the client API for Roomserver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomserverClient interface {
	Ping(ctx context.Context, opts ...grpc.CallOption) (Roomserver_PingClient, error)
}

type roomserverClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomserverClient(cc grpc.ClientConnInterface) RoomserverClient {
	return &roomserverClient{cc}
}

func (c *roomserverClient) Ping(ctx context.Context, opts ...grpc.CallOption) (Roomserver_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Roomserver_ServiceDesc.Streams[0], "/test.Roomserver/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomserverPingClient{stream}
	return x, nil
}

type Roomserver_PingClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type roomserverPingClient struct {
	grpc.ClientStream
}

func (x *roomserverPingClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *roomserverPingClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoomserverServer is the server API for Roomserver service.
// All implementations should embed UnimplementedRoomserverServer
// for forward compatibility
type RoomserverServer interface {
	Ping(Roomserver_PingServer) error
}

// UnimplementedRoomserverServer should be embedded to have forward compatible implementations.
type UnimplementedRoomserverServer struct {
}

func (UnimplementedRoomserverServer) Ping(Roomserver_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeRoomserverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomserverServer will
// result in compilation errors.
type UnsafeRoomserverServer interface {
	mustEmbedUnimplementedRoomserverServer()
}

func RegisterRoomserverServer(s grpc.ServiceRegistrar, srv RoomserverServer) {
	s.RegisterService(&Roomserver_ServiceDesc, srv)
}

func _Roomserver_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RoomserverServer).Ping(&roomserverPingServer{stream})
}

type Roomserver_PingServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type roomserverPingServer struct {
	grpc.ServerStream
}

func (x *roomserverPingServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *roomserverPingServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Roomserver_ServiceDesc is the grpc.ServiceDesc for Roomserver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Roomserver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.Roomserver",
	HandlerType: (*RoomserverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Roomserver_Ping_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
